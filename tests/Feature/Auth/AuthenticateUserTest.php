<?php

namespace Tests\Feature;

use App\Entities\User;
use Faker\Factory;
use Illuminate\Support\Facades\Artisan;
use Tests\RestoreDatabaseTrait;
use Tests\TestCase;
use Tymon\JWTAuth\Facades\JWTAuth;

class AuthenticateUserTest extends TestCase
{

    use RestoreDatabaseTrait;

    protected static $data = null;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        if (!isset(self::$data)) {

            $faker = Factory::create();

            self::$data = [
                'name' => $faker->name,
                'email' => $faker->email,
                'active' => true,
                'password' => 'secret',
                'password_confirmation' => 'secret',
            ];
        }

    }

    public function testUserCreate()
    {

        Artisan::call('db:seed', [
            '--class'   => 'UserTenantSeeder',
            '--force'   => true
        ]);


        $this->post(route('users.tenants.store'), self::$data)
                ->assertStatus(200);

        $this->assertDatabaseHas('users', [
            'name' => self::$data['name'],
            'email' => self::$data['email']
        ]);

    }

    public function testUserAuthenticateValid() {


        $response = $this->post(route('auth.login'),
                [
                    'email'=> self::$data['email'],
                    'password' => self::$data['password']
                ])->assertStatus(200);

        $response->assertJson(['data' => [
            'HTTP_Authorization' => true
        ]]);

        $json = json_decode( $response->content() );
        JWTAuth::setToken($json->data->HTTP_Authorization);

        $token = JWTAuth::getToken();
        $decode = JWTAuth::decode($token);

        $data = $decode->get('sub');
        $this->assertEquals($data->email, self::$data['email']);

    }

    public function testUserAuthenticateInvalid() {

        $response = $this->post(route('auth.login'),
                ['email'=> self::$data['email'] ,'password' => str_random(8)])
            ->assertStatus(401);

        $response->assertJson(['error' => 'invalid_credentials']);
        $response->assertJson(['code' => 401]);

    }

    public function testRestoreDatabase()
    {
        $this->restoreDatabase();
        $this->assertTrue(true);
    }

}
