<?php

namespace Tests\Feature;

use App\User;
use Faker\Factory;
use Tests\TestCase;
use Tymon\JWTAuth\Facades\JWTAuth;

class AuthenticateUserTest extends TestCase
{

    public $data = [];

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub


        $faker = Factory::create();

        $this->data = [
            'name' => $faker->name,
            'email' => $faker->email,
            'active' => true,
            'is_admin' => User::ADMIN_USER,
            'password' => 'secret',
            'password_confirmation' => 'secret',
        ];

        factory(User::class)->create(['is_admin' => User::ADMIN_USER]);

    }


    public function testUserCreate()
    {

        $user = User::where('is_admin', true)->first();
        $token = JWTAuth::fromUser($user);

        $headers = [
            'Accept' => 'application/vnd.laravel.v1+json',
            'HTTP_Authorization' => 'Bearer ' . $token
        ];

        $this->post(route('users.admins.store'), $this->data, $headers)
                ->assertStatus(200);

        $this->assertDatabaseHas('users', [
            'name' => $this->data['name'],
            'email' => $this->data['email'],
            'is_admin' => User::ADMIN_USER
        ]);

    }

    public function testUserAuthenticateValid() {


        $user = User::where('is_admin', User::ADMIN_USER)->first();

        $response = $this->post(route('auth.login'),
                ['email'=>  $user->email, 'password' => $this->data['password']])
            ->assertStatus(200);

        $response->assertJson(['data' => [
            'HTTP_Authorization' => true
        ]]);

        $json = json_decode( $response->content() );
        JWTAuth::setToken($json->data->HTTP_Authorization);

        $token = JWTAuth::getToken();
        $decode = JWTAuth::decode($token);

        $data = $decode->get('sub');
        $this->assertEquals($data->email, $user->email);

    }

    public function testUserAuthenticateInvalid() {

        $user = User::where('is_admin', true)->first();
        $response = $this->post(route('auth.login'),
                ['email'=>$user->email,'password' => str_random(6)])
            ->assertStatus(401);

        $response->assertJson(['error' => 'invalid_credentials']);
        $response->assertJson(['code' => 401]);

    }

}
